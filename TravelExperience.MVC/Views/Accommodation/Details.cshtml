@model TravelExperience.MVC.ViewModels.AccommodationFormViewModel
@using Microsoft.AspNet.Identity
@using TravelExperience.DataAccess.Persistence
@using TravelExperience.DataAccess.Core

<link rel="stylesheet" href="//code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css">
<link rel="stylesheet" href="/resources/demos/style.css">
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.0/jquery-ui.js"></script>

<div>
    <div class="container">
        <h3><strong>@Html.DisplayFor(model => model.Accommodation.Title)</strong></h3>
        <h5 style="text-decoration:underline;">@Html.DisplayFor(model => model.Accommodation.Location.City) , @Html.DisplayFor(model => model.Location.Country) </h5>
        <hr />
        <div>
            @*Loads the given thumbnailAccommodation ImageInfo. Then it loads as a partial view the aquired image.*@
            @{ var firstThumb = @Model.ThumbnailOfAccommodations[Model.Accommodation].FirstOrDefault(); }
            @Html.Partial("_AccommodationThumbnail", @firstThumb)
        </div>
        <hr />
        @{
            var context = new AppDBContext();
            var unitOfWork = new UnitOfWork(context);
            var userID = Model.Accommodation.HostID;
            var hostName = unitOfWork.Users.GetById(userID).FirstName;
            <h3>Rental unit hosted by @hostName </h3>
        }
        @Html.DisplayFor(model => model.Accommodation.MaxCapacity) Guests ·

        @if (Model.Accommodation.Shared.Equals(true))
        {
        <row>Shared</row>  @Html.DisplayFor(model => model.Accommodation.AccommodationType);
        }
        else if (Model.Accommodation.Shared.Equals(false))
        {
        <row>Entire</row>  @Html.DisplayFor(model => model.Accommodation.AccommodationType);
        }

        <hr />

        <div class="col-md-6">
            @Html.DisplayFor(model => model.Accommodation.Description)
            <hr />
            <h4 style="text-decoration:underline;">What this place offers</h4>
            <ul class="utilities" style="list-style:square;">
                @for (int i = 0; i < Model.Utilities.Count(); i++)
                {
                <li> @Model.Utilities[i].UtilityEnum.ToString() </li>
                }
            </ul>
        </div>

        <div class="col-md-6">
            <div class="card" style="box-shadow: 10px 10px 10px grey; border: groove; border-radius:5px; padding:5px;">
                <h3 class="card-header" style="border-radius:10px; border:2px solid black;">€ @Html.DisplayFor(model => model.Accommodation.PricePerNight) / night</h3>
                <div class="card-body">
                    <h4 class="card-title">Booking in @Html.DisplayFor(m => m.Accommodation.Location.City)</h4>

                    Total Guests: @Model.Accommodation.MaxCapacity
                    <br />
                </div>
                <br />

                @if (!Model.IsViewedByOwner)
                {
                <form action="@Url.Action("Index", "Payment")" method="post" style="margin-bottom: 20px">

                    @Html.AntiForgeryToken()

                    @Html.Hidden("AccommodationID", Model.Accommodation.AccommodationID)
                    <div class="form-horizontal">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Accommodation.MaxCapacity, "Guests", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-8">
                                @Html.DropDownList("Guests", Model.GuestOptions, htmlAttributes: new { @class = "form-control", value = "1" })
                                @Html.ValidationMessageFor(model => model.Accommodation.MaxCapacity, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Booking.BookingStartDate, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.Booking.BookingStartDate, new { @class = "form-control datepicker", Value = DateTime.Now.ToString("dd/MM/yyyy").Replace(" ", "/"), Name = "BookingStartDate" })
                                @Html.HiddenFor(model => model.Booking.BookingStartDate)

                                @Html.ValidationMessageFor(model => model.Booking.BookingStartDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Booking.BookingEndDate, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.Booking.BookingEndDate, new { @class = "form-control datepicker", Value = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy").Replace(" ", "/"), Name = "BookingEndDate" })
                                @Html.HiddenFor(model => model.Booking.BookingEndDate)

                                @Html.ValidationMessageFor(model => model.Booking.BookingEndDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary btn-lg">Book Now</button>
                </form>
                }


            </div>
        </div>
    </div>
    <button onclick="history.back()" class="btn-danger">Back</button>
</div>

<script>
    function formatDate() {
        var x = new Date();
        var y = x.getFullYear().toString();
        var m = (x.getMonth() + 1).toString();
        var d = x.getDate().toString();
        (d.length == 1) && (d = '0' + d);
        (m.length == 1) && (m = '0' + m);
        var yyyymmdd = y + '-' + m + '-' + d;
        return yyyymmdd;
    };

    var availabilityDates = {
        BookingUnavailableDates: [],
        AccommodationAvailableFrom: null,
        AccommodationAvailableTo: null
    };

     fetch('@Url.Action("GetInvalidBookingDates", "Accommodation", new { accommodationID = 2 })', { credentials: 'include' })
        .then(res => res.json())
        .then(data => { availabilityDates = data; });

    function dateWithinAvailableBookingRange(date) {
        if (availabilityDates.AccommodationAvailableFrom > date && availabilityDates.AccommodationAvailableTo < date)
            return true;
        else
            return false;
    };

    $('.datepicker').datepicker({
        dateFormat: 'dd/mm/yy',
        beforeShowDay: function (date) {
           
            return [function (date) { return (abilityDates.AccommodationAvailableFrom > date && availabilityDates.AccommodationAvailableTo < date); }]
        }
    });

</script>
